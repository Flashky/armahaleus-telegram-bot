# This workflow will build a Java project with Maven and then create a Docker image from its Dockerfile.
# For more information see: 
# - https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven
# - https://github.com/marketplace/actions/build-tag-publish-docker

name: Release version

on:
  release:
    types: [published]


jobs:
  
  # Verifies the tag version is valid
  # Allowed format is prefix "v" and alphanumeric characters.
  # Examples: v0.1.0, v0.1.0-alpha, v0.1.0-RELEASE
  verify:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: olegtarasov/get-tag@v2
      id: version
      with:
        tagRegex: "^v([0-9]+.[0-9]+.[0-9]+[-]?\\w*)"  # Optional. Returns specified group text as tag name. Full tag string is returned if regex is not defined.
        tagRegexGroup: 1 # Optional. Default is 1.
    - name: Abort release
      if: steps.version.outputs.tag == null
      run: | 
        echo "Tag name is invalid."
        echo "Expected: v[0-9]+.[0-9]+.[0-9]+"
        echo "But found: ${GITHUB_REF##*/}"
        exit 1
        
  # Builds java project with Maven and generate artifact
  build:
    runs-on: ubuntu-latest
    needs: verify
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v1
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Get release version
      run: echo ::set-env name=RELEASE_VERSION::$(echo ${GITHUB_REF##*/v})
    - name: Update pom.xml version
      run: mvn versions:set -DnewVersion=${{ env.RELEASE_VERSION }}
    - name: Build with Maven
      run: mvn -B package --file pom.xml
    - name: Get jar filename
      run: echo ::set-env name=JAR_FILE::$(ls target/*.jar)
    - name: Upload java artifact
      uses: actions/upload-artifact@v1
      with:
        name: java-artifact
        path:  ${{ env.JAR_FILE }}
  
  # Builds a docker image and pushes it to DockerHub.
  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v2
    - name: Download java artifact
      uses: actions/download-artifact@v2
      with:
        name: java-artifact
        path: target
    - name: Get release version
      run: echo ::set-env name=RELEASE_VERSION::$(echo ${GITHUB_REF##*/v})
    - name: Build, Tag, Publish Docker
      uses: elgohr/Publish-Docker-Github-Action@master
      with:
        name: flashk/armahaleus-telegram-bot
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        tags: "latest,${{ env.RELEASE_VERSION }}"
    
